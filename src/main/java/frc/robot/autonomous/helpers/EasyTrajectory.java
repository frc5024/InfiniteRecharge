package frc.robot.autonomous.helpers;

import java.util.Arrays;
import java.util.List;

import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Translation2d;

public class EasyTrajectory {

    /* Trajectory points */
    private Pose2d[] points;
    private Translation2d[] innerPoints;

    /**
     * Trajectory type
     * 
     * From WPI:
     * 
     * - Hermite clamped cubic: This is the recommended option for most users.
     * Generation of trajectories using these splines involves specifying the (x, y)
     * coordinates of all points, and the headings at the start and end waypoints.
     * The headings at the interior waypoints are automatically determined to ensure
     * continuous curvature (rate of change of the heading) throughout.
     * 
     * - Hermite quintic: This is a more advanced option which requires the user to
     * specify (x, y) coordinates and headings for all waypoints. This should be
     * used if you are unhappy with the trajectories that are being generated by the
     * clamped cubic splines or if you want finer control of headings at the
     * interior points.
     * 
     */
    public boolean isQuintic;

    /**
     * Create a trajectory from a start and end position
     * 
     * @param start Start pose
     * @param end   End pose
     */
    public EasyTrajectory(Pose2d start, Pose2d end) {
        this.points = new Pose2d[] { start, end };
        this.isQuintic = true;
    }

    /**
     * Create a trajectory from a list of points
     * 
     * @param points Array of poses (Must have at least 2 poses)
     */
    public EasyTrajectory(Pose2d... points) {

        // Ensure there are enough points
        assert points.length >= 2;

        this.points = points;
        this.isQuintic = true;
    }

    /**
     * Create a cubic spline trajectory from start, end, and s-curve points
     * 
     * @param start Start pose
     * @param a     First interior translation
     * @param b     Second interior translation
     * @param end   End pose
     */
    public EasyTrajectory(Pose2d start, Translation2d a, Translation2d b, Pose2d end) {
        this.points = new Pose2d[] { start, end };
        this.innerPoints = new Translation2d[]   {  a , b };
        this.isQuintic = false;
    }
    
    /**
     * Create a cubic spline trajectory from start, end, and s-curve points
     * 
     * @param start Start pose
     * @param end   End pose
     */
    public EasyTrajectory(Pose2d start, Pose2d end, Translation2d ... innerPoints) {
        this.points = new Pose2d[] { start, end };
        this.innerPoints = innerPoints;
        this.isQuintic = false;
    }

    /**
     * Get all defined absolute points. If this is a cubic spline, they will be the
     * start and end poses
     * 
     * @return All Poses
     */
    public List<Pose2d> getABSPoints() {
        return Arrays.asList(points);
    }

    /**
     * Get interior points. This will be null if not cubic
     * 
     * @return Interior points
     */
    public List<Translation2d> getInteriorPoints() {
        return Arrays.asList(innerPoints);
    }
}